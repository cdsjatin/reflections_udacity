Q1- What happens when you initialize a repository? Why do you need to do it?
A1 - when initialized git creates a metadata folder, and doesnot commit anything otherwise there is no message and all directory are not to be commited.

Q2 - How is the staging area different from the working directory and the repository? What value do you think it offers?
A2 - staging area is the intermediate between the working directory and the repository. It helps to commit the number of file at once. than separeately which have logical division.

Q3 - How can you use the staging area to make sure you have one commit per logical change?
A3 - use command like git diff to compare b/w staging area and working directory and also git diff --staged to compare between staging area and repository.
So, If you want to discard changes use git reset --hard to discard all the changes.

Q4- What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A4- when I want to make some logical change for experimentation we can use branching. Later we can also merge those branches if that works. We can checkout at wherever branch we want and those changes are not reflected on the master branch.
-- context switching -- or correct bug -- sharing project 
-- development branch (active work) -- experimental branch -- fully expected to break. -- switch and start working on another project too.

Q5 - How do the diagrams help you visualize the branch structure?
A5 - It;s easy to understand the branches and not reachable on git and also the master or any other branch. One can always think of the commits in terms of these state diagram and dependency of each commit or state.

Q-6 What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A-6 The merging helps the branches to choose and have the code from experiment if experiment worked. and also it assumes that branches that deletes things is not using them, because git log --oneline there is diagram made too.
